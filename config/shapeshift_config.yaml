# ShapeShift Affiliate Tracker Configuration
# =======================================
# 
# HISTORY & LEARNING:
# - Originally had scattered hardcoded addresses across multiple listener files
# - This led to inconsistent affiliate tracking and maintenance nightmares
# - Previous attempts at centralized config failed due to overly strict validation
# - Current approach: Flexible config with graceful fallbacks for hybrid system
#
# WHAT THIS SYSTEM IS ATTEMPTING:
# - Single source of truth for all ShapeShift affiliate addresses
# - Centralized contract addresses and chain configurations
# - Protocol-specific settings and event signatures
# - Support for both centralized and legacy listener approaches
#
# WHY THIS APPROACH:
# - Eliminates duplicate address definitions across files
# - Enables easy updates without touching listener code
# - Provides consistency across all protocols
# - Supports gradual migration from hardcoded to centralized config
#
# CURRENT STATUS:
# - Hybrid approach implemented and working
# - Centralized config for new listeners (portals, thorchain, cowswap)
# - Legacy support for existing listeners (relay, butterswap)
# - No volume thresholds (comprehensive tracking)

# API Keys and RPC Endpoints
# ==========================
# These are loaded from environment variables for security
# Priority: .env file > environment variables > config file
api:
  alchemy_api_key: "${ALCHEMY_API_KEY}"      # Primary RPC provider (recommended)
  infura_api_key: "${INFURA_API_KEY}"        # Fallback RPC provider
  coinmarketcap_api_key: "${COINMARKETCAP_API_KEY}"  # Price data (optional)

# ShapeShift Affiliate Addresses (all known variations)
# ====================================================
# This section consolidates all known ShapeShift affiliate addresses
# from various protocols and historical data
#
# ADDRESS STRATEGY:
# - Primary: Main address used across most protocols
# - Protocol-specific: Addresses specific to certain protocols
# - Legacy: Historical addresses found in existing data
# - Variations: Common patterns and text variations for detection
shapeshift_affiliates:
  # Primary ShapeShift addresses
  primary: "0x35339070f178dC4119732982C23F5a8d88D3f8a3"  # Main address (most protocols)
  relay: "0x9c9aA90363630d4ab1D9dbF416cc3BBC8d3Ed502"    # Relay affiliate (Base chain)
  portals: "0x35339070f178dC4119732982C23F5a8d88D3f8a3"   # Portals affiliate
  thorchain: "0x35339070f178dC4119732982C23F5a8d88D3f8a3" # ThorChain affiliate
  cowswap: "0x9c9aA90363630d4ab1D9dbF416cc3BBC8d3Ed502"   # CoW Swap affiliate (Base chain)
  butterswap: "0x35339070f178dC4119732982C23F5a8d88D3f8a3" # ButterSwap affiliate (Base chain)
  
  # Alternative/legacy addresses found in data
  # These were discovered during testing and analysis
  legacy_relay: "0x2905d7e4d048d29954f81b02171dd313f457a4a4"  # Found in existing relay data
  legacy_portals: "0x0840bba848e991cdcfbf2b71b8e1cb94fb72d6343ad4bb182f7ee1c48612221d"  # From Portals transaction analysis
  
  # Protocol-specific addresses
  # ThorChain uses different address format (bech32)
  thorchain_address: "thor122h9hlrugzdny9ct95z6g7afvpzu34s73uklju"  # THORChain affiliate address
  thorchain_name: "ss"  # THORChain affiliate name abbreviation (used in memos)
  
  # Common variations for pattern matching
  # These help detect affiliate transactions even with slight variations
  variations:
    - "0x35339070f178dC4119732982C23F5a8d88D3f8a3"  # Current primary
    - "0x9c9aA90363630d4ab1D9dbF416cc3BBC8d3Ed502"  # Relay/CoW Swap Base
    - "0x2905d7e4d048d29954f81b02171dd313f457a4a4"  # Legacy
    - "0x0840bba848e991cdcfbf2b71b8e1cb94fb72d6343ad4bb182f7ee1c48612221d"  # Portals
    - "shapeshift"  # Text variations (case-insensitive)
    - "ss"  # Abbreviation (common in memos)
    - "ShapeShift"  # Capitalized variations
    - "SHAPESHIFT"  # All caps variations

# Chain Configurations
# ====================
# Each blockchain has its own configuration for optimal performance
# Settings are tuned based on network characteristics and rate limits
chains:
  ethereum:
    name: "Ethereum Mainnet"
    chain_id: 1
    rpc_url: "https://eth-mainnet.g.alchemy.com/v2/${ALCHEMY_API_KEY}"
    start_block: 19000000  # Approximate deployment of most protocols
    chunk_size: 100        # Blocks per batch (conservative for mainnet)
    delay: 0.5             # Seconds between batches (rate limiting)
    
  polygon:
    name: "Polygon PoS"
    chain_id: 137
    rpc_url: "https://polygon-mainnet.g.alchemy.com/v2/${ALCHEMY_API_KEY}"
    start_block: 50000000  # Later deployment on Polygon
    chunk_size: 100        # Conservative for stability
    delay: 0.5             # Rate limiting
    
  arbitrum:
    name: "Arbitrum One"
    chain_id: 42161
    rpc_url: "https://arb-mainnet.g.alchemy.com/v2/${ALCHEMY_API_KEY}"
    start_block: 100000000 # Much later deployment
    chunk_size: 100        # Conservative approach
    delay: 0.5             # Rate limiting
    
  optimism:
    name: "Optimism"
    chain_id: 10
    rpc_url: "https://opt-mainnet.g.alchemy.com/v2/${ALCHEMY_API_KEY}"
    start_block: 50000000  # Later deployment
    chunk_size: 100        # Conservative
    delay: 0.5             # Rate limiting
    
  base:
    name: "Base"
    chain_id: 8453
    rpc_url: "https://base-mainnet.g.alchemy.com/v2/${ALCHEMY_API_KEY}"
    start_block: 32900000  # Base deployment block
    chunk_size: 100        # Conservative
    delay: 0.5             # Rate limiting
    
  avalanche:
    name: "Avalanche"
    chain_id: 43114
    rpc_url: "https://api.avax.network/ext/bc/C/rpc"  # Public RPC (no API key needed)
    start_block: 30000000  # Later deployment
    chunk_size: 100        # Conservative
    delay: 0.5             # Rate limiting

# Protocol-Specific Contract Addresses
# ===================================
# Each protocol has different contract addresses across chains
# Some protocols use the same address on all chains, others vary
contracts:
  relay:
    # Relay router addresses across chains
    # Relay is a cross-chain aggregation protocol
    ethereum: "0x542f021da7834c7f81531b48961d3f467f54b0f08"
    polygon: "0x542f021da7834c7f81531b48961d3f467f54b0f08"
    arbitrum: "0x542f021da7834c7f81531b48961d3f467f54b0f08"
    optimism: "0x542f021da7834c7f81531b48961d3f467f54b0f08"
    base: "0xF5042e6ffaC5a625D4E7848e0b01373D8eB9e222"      # Different on Base
    avalanche: "0x542f021da7834c7f81531b48961d3f467f54b0f08"
    
    # Alternative router addresses
    base_alternative: "0xeeeeee9eC4769A09a76A83C7bC42b185872860eE"  # ETH router for Base
    
    # Event signatures for affiliate fee detection
    affiliate_fee_event: "0x4a25d94a55df505cf9da1f1649d0381e2613c3c83c6a0a3df055ae0e82f6e4d7"
    transfer_event: "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef"
    
  portals:
    # Portals contract addresses
    # Portals is a bridge protocol, same address across all chains
    ethereum: "0x5C7F8A570d578ED84E63fdFA7b1eE72dEae1AE23"
    polygon: "0x5C7F8A570d578ED84E63fdFA7b1eE72dEae1AE23"
    arbitrum: "0x5C7F8A570d578ED84E63fdFA7b1eE72dEae1AE23"
    optimism: "0x5C7F8A570d578ED84E63fdFA7b1eE72dEae1AE23"
    base: "0x5C7F8A570d578ED84E63fdFA7b1eE72dEae1AE23"
    avalanche: "0x5C7F8A570d578ED84E63fdFA7b1eE72dEae1AE23"
    
    # Event signatures for affiliate fee detection
    affiliate_fee_event: "0x4a25d94a55df505cf9da1f1649d0381e2613c3c83c6a0a3df055ae0e82f6e4d7"
    
  thorchain:
    # ThorChain API endpoints
    # ThorChain doesn't use smart contracts, uses API endpoints instead
    midgard_api: "https://midgard.ninerealms.com/v2"      # Transaction data API
    thornode_api: "https://thornode.ninerealms.com"       # Node information API
    
    # ThorChain addresses (if any)
    affiliate_address: "thor122h9hlrugzdny9ct95z6g7afvpzu34s73uklju"  # Affiliate address
    affiliate_name: "ss"  # Affiliate name abbreviation (used in memos)
    
  cowswap:
    # CoW Swap contract addresses
    # CoW Swap uses the same settlement contract across all chains
    ethereum: "0x9008d19f58aabd9ed0d60971565aa8510560ab41"
    polygon: "0x9008d19f58aabd9ed0d60971565aa8510560ab41"
    arbitrum: "0x9008d19f58aabd9ed0d60971565aa8510560ab41"
    optimism: "0x9008d19f58aabd9ed0d60971565aa8510560ab41"
    base: "0x9008d19f58aabd9ed0d60971565aa8510560ab41"
    avalanche: "0x9008d19f58aabd9ed0d60971565aa8510560ab41"
    
    # Event signatures for order detection
    order_event: "0x0bcc4c97732e47d9946f229edb95f5e6320829021d42f1eec4c37c14845c8a8e"
    
  butterswap:
    # ButterSwap contract addresses (using Uniswap V2 as reference)
    # ButterSwap likely uses similar contracts to Uniswap V2
    ethereum: "0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D"      # Uniswap V2 Router
    polygon: "0xa5E0829CaCEd8fFDD4De3c43696c57F7D7A678ff"      # QuickSwap Router
    optimism: "0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D"      # Uniswap V2 Router
    arbitrum: "0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D"      # Uniswap V2 Router
    base: "0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D"         # Uniswap V2 Router
    avalanche: "0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D"     # Uniswap V2 Router
    bsc: "0x10ED43C718714eb63d5aA57B78B54704E256024E"           # PancakeSwap Router
    
    # Event signatures for swap detection
    swap_event: "0xd78ad95fa46c994b6551d0da85fc275fe613ce37657fb8d5e3d130840159d822"
    mint_event: "0x4c209b5fc8ad50758f13e2e1088ba56a560dff690a1c6fef26394f4c03821c4f"
    burn_event: "0xdccd412f0b1252819cb1fd330b93224ca42612892bb3f4f789976e6d81936496"
    transfer_event: "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef"

# Data Storage Configuration
# =========================
# Defines where different types of data are stored
# CSV-based storage for easy analysis and export
storage:
  csv_directory: "csv_data"           # Base directory for all CSV files
  database_directory: "databases"     # Legacy database storage (if any)
  backup_directory: "backups"         # Backup files and archives
  
  # File naming conventions for different protocols
  # Pattern: {protocol}_transactions.csv
  file_patterns:
    portals: "portals_transactions.csv"           # Portals bridge transactions
    relay: "relay_transactions.csv"               # Relay aggregation transactions
    thorchain: "thorchain_transactions.csv"       # ThorChain swap transactions
    cowswap: "cowswap_transactions.csv"           # CoW Swap transactions
    butterswap: "butterswap_transactions.csv"     # ButterSwap transactions
    block_tracker: "{protocol}_block_tracker.csv"  # Progress tracking
    consolidated: "consolidated_transactions.csv"  # Combined data

# Listener Configuration
# =====================
# Settings specific to each protocol listener
# Common settings apply to all, protocol-specific override them
listeners:
  # Common settings for all listeners
  # These provide sensible defaults
  common:
    max_blocks_per_scan: 1000    # Maximum blocks to scan in one run
    retry_attempts: 3             # Number of retries on failure
    retry_delay: 1.0              # Seconds between retries
    rate_limit_delay: 0.5         # Base delay for rate limiting
    
  # Protocol-specific settings
  # These override common settings for optimal performance
  relay:
    chunk_size: 100               # Blocks per batch
    delay: 0.5                    # Seconds between batches
    max_blocks: 1000              # Maximum blocks per run
    
  portals:
    chunk_size: 100               # Conservative for bridge protocol
    delay: 0.5                    # Rate limiting
    max_blocks: 1000              # Reasonable limit
    
  thorchain:
    api_rate_limit: 1.0           # Seconds between API calls (ThorChain specific)
    max_swaps_per_request: 100    # Maximum swaps per API request
    
  cowswap:
    chunk_size: 100               # Standard batch size
    delay: 0.5                    # Rate limiting
    max_blocks: 1000              # Reasonable limit
    
  butterswap:
    chunk_size: 100               # Standard batch size
    delay: 0.5                    # Rate limiting
    max_blocks: 1000              # Reasonable limit

# Volume Thresholds
# =================
# These control which transactions are processed
# 
# HISTORY: Originally had $13.0 minimum volume threshold
# PROBLEM: This filtered out many legitimate affiliate transactions
# SOLUTION: Set to $0.0 for comprehensive tracking
#
# WHY NO MINIMUM VOLUME:
# - Small transactions can still have meaningful affiliate fees
# - Volume doesn't always correlate with affiliate fee importance
# - Comprehensive tracking provides better data for analysis
# - Can filter later in analysis if needed
thresholds:
  minimum_volume_usd: 0.0        # No minimum volume (comprehensive tracking)
  minimum_affiliate_fee_usd: 0.01 # Minimum affiliate fee to track (prevents dust)
  
# Logging Configuration
# ====================
# Controls how much information is logged
# Useful for debugging and monitoring
logging:
  level: "INFO"                   # Log level: DEBUG, INFO, WARNING, ERROR
  format: "%(asctime)s - %(name)s - %(levelname)s - %(message)s"
  file: "logs/shapeshift_tracker.log"  # Log file location
  
# Monitoring and Alerts
# =====================
# Health check and alerting configuration
# Helps identify when listeners are failing
monitoring:
  health_check_interval: 300      # Health check every 5 minutes
  alert_on_failure: true          # Send alerts on failures
  max_consecutive_failures: 3     # Alert after 3 consecutive failures
